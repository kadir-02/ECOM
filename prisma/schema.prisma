// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  password       String? // ðŸ”„ Made optional for guests
  isGuest        Boolean        @default(false) // âœ… NEW: Flag for guest users
  profile        Profile?       @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId      Int?           @unique
  createdAt      DateTime       @default(now())
  role           Role           @default(USER)
  resetOTP       String?
  resetOTPExpiry DateTime?
  isDeleted      Boolean        @default(false)
  cart           Cart?
  orders         Order[]
  addresses      Address[]
  discountCodes  DiscountCode[]
  notifications  Notification[]
}

model Profile {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  bio       String?
  imageUrl  String?
  user      User?   @relation()
}

model Category {
  id            Int           @id @default(autoincrement())
  sequence_number Int? 
  name          String        @unique
  subcategories Subcategory[]
  products      Product[]     @relation("CategoryToProduct")
  createdAt     DateTime      @default(now())
  isDeleted     Boolean       @default(false)
  banner  String?
  imageUrl String? // Optional image URL
  publicId String? // Optional Cloudinary public ID
}

model Subcategory {
  id         Int       @id @default(autoincrement())
  name       String
  sequence_number Int?
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId Int
  products   Product[] @relation("SubcategoryToProduct")
  createdAt  DateTime  @default(now())
  isDeleted  Boolean   @default(false)
  banner  String?
  imageUrl String? // Optional image URL
  publicId String? // Optional Cloudinary public ID

  @@unique([name, categoryId])
}

model Product {
  id            Int          @id @default(autoincrement())
  name          String
  description   String?
  imageUrl      String?
  publicId      String?
  basePrice     Float?
  oldPrice      Float?
  category      Category?    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  categoryId    Int?
  subcategory   Subcategory? @relation("SubcategoryToProduct", fields: [subcategoryId], references: [id])
  subcategoryId Int?
  variants      Variant[]
  createdAt     DateTime     @default(now())
  slug          String       @unique
  isDeleted     Boolean      @default(false)
  cartItems     CartItem[]
  orderItems    OrderItem[]

  tags String[] // âœ… Optional string array
}

model Variant {
  id         Int            @id @default(autoincrement())
  name       String // e.g., "Red - Medium"
  price      Float
  oldPrice   Float?
  stock      Int
  product    Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  createdAt  DateTime       @default(now())
  images     VariantImage[]
  isDeleted  Boolean        @default(false)
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model VariantImage {
  id        Int      @id @default(autoincrement())
  url       String
  variant   Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId Int
  publicId  String?
  createdAt DateTime @default(now())
}

model Cart {
  id             Int            @id @default(autoincrement())
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int            @unique
  items          CartItem[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  reminderCount  Int            @default(0)
  lastReminderAt DateTime?
  discountCodes  DiscountCode[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product? @relation(fields: [productId], references: [id])
  productId Int? // used if there's no variant
  variant   Variant? @relation(fields: [variantId], references: [id])
  variantId Int? // used if a variant is selected
  quantity  Int
  createdAt DateTime @default(now())
}

enum AddressType {
  SHIPPING
  BILLING
}

model Address {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  type        AddressType @default(SHIPPING) // billing or shipping
  fullName    String
  phone       String
  pincode     String
  state       String
  city        String
  addressLine String
  landmark    String?
  isDefault   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orders      Order[]
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id             Int         @id @default(autoincrement())
  user           User        @relation(fields: [userId], references: [id])
  userId         Int
  items          OrderItem[]
  totalAmount    Float
  status         OrderStatus @default(PENDING)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  subtotal       Float? // total before discount
  discountAmount Float? // discount applied
  discountCode   String? // optional code/label

  payment   Payment? @relation(fields: [paymentId], references: [id])
  paymentId Int?     @unique

  address   Address @relation(fields: [addressId], references: [id])
  addressId Int
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
  variant   Variant? @relation(fields: [variantId], references: [id])
  variantId Int?
  quantity  Int
  price     Float
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model Payment {
  id            Int           @id @default(autoincrement())
  method        String // e.g., "Razorpay", "COD"
  status        PaymentStatus @default(PENDING)
  transactionId String? // from gateway
  paidAt        DateTime?
  createdAt     DateTime      @default(now())

  order Order?
}

model DiscountCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  userId    Int
  cartId    Int?
  discount  Int
  used      Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User  @relation(fields: [userId], references: [id])
  cart Cart? @relation(fields: [cartId], references: [id])
}

model DiscountRule {
  id         Int      @id @default(autoincrement())
  percentage Int // e.g., 10 for 10%
  minItems   Int // e.g., 5 items minimum
  createdAt  DateTime @default(now())
}

model WhyChooseUsItem {
  id          Int      @id @default(autoincrement())
  mainTitle   String?
  title       String
  subtitle    String
  description String
  iconUrl     String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GalleryItem {
  id          Int      @id @default(autoincrement())
  title       String?
  description String?
  imageUrl    String
  publicId    String
  category    String? // Optional: "Living Room", "Office", etc.
  createdAt   DateTime @default(now())
}

enum NotificationType {
  ORDER
  ALERT
  SYSTEM
}

model Notification {
  id        Int              @id @default(autoincrement())
  user      User             @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  type      NotificationType @default(ORDER) // âœ… Added type field
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
}

// Home Page Tables
model header {
  id              Int      @id @default(autoincrement())
  sequence_number Int      @unique
  name            String
  link            String
  is_active       Boolean
  created_by      String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model HomepageBanner {
  id              Int      @id @default(autoincrement())
  sequence_number Int      @unique
  heading         String
  subheading      String?
  subheading2     String? // optional second subheading
  buttonText      String?
  buttonLink      String?
  imageUrl        String? // optional: for background/banner image
  mobile_banner   String?
  publicId        String? // optional: for cloud storage reference
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isActive        Boolean  @default(true)
}

model CompanySettings {
  id                          String   @id @default(uuid())
  country                     String
  currency                    String
  currency_symbol             String
  logo                        String?   // Optional logo
  address                     String
  phone                       String
  email                       String
  description                 String?

  facebook_icon               String?   // Optional social icons/links
  facebook_link               String?
  instagram_icon              String?
  instagram_link              String?
  twitter_icon                String?
  twitter_link                String?
  linkedin_icon               String?
  linkedin_link               String?

  product_low_stock_threshold Int
  minimum_order_quantity      Int

  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
}
